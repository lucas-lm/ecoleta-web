{"version":3,"sources":["assets/logo.svg","pages/home/index.tsx","components/Dropzone/index.tsx","services/api.ts","pages/CreatePoint/index.tsx","Routes.tsx","App.tsx","index.tsx"],"names":["module","exports","Home","id","className","src","logo","alt","to","Dropzone","onFileUpload","onDrop","useCallback","acceptedFiles","file","fileURL","URL","createObjectURL","setSelectedFileBlob","useDropzone","accept","getRootProps","getInputProps","useState","selectedFileBlob","process","baseURL","REACT_APP_API_URL","REACT_APP_API_IBGE","api","axios","create","ibge","CreatePoint","items","setItems","ufs","setUfs","cities","setCities","selectedFile","setSelectedFile","initialPosition","setInitialPosition","selectedPosition","setSelectedPosition","selectedUf","setSelectedUf","selectedCity","setSelectedCity","selectedItems","setSelectedItems","name","email","whatsapp","textInputData","setTextInputData","history","useHistory","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","a","get","data","fetchItems","ufInitials","map","uf","sigla","fetchUfs","cityNames","city","nome","fetchCities","handleTextInputChange","event","target","value","handleSubmit","preventDefault","alert","key","formData","FormData","join","photo","String","append","post","status","push","onSubmit","htmlFor","type","onChange","Map","center","zoom","onclick","latlng","lat","lng","TileLayer","attribution","url","Marker","item","onClick","itemId","includes","filter","image_url","title","Routes","exact","path","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24216157.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.47c4581a.svg\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { FiLogIn } from 'react-icons/fi'\r\nimport logo from '../../assets/logo.svg'\r\n\r\nimport './styles.css'\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div id=\"page-home\">\r\n      <div className=\"content\">\r\n        <header>\r\n          <img src={logo} alt=\"ecoleta\" />\r\n        </header>\r\n        <main>\r\n          <h1>Seu marketplace de coleta de res√≠duos</h1>\r\n          <p>\r\n            Ajudamos pessoas a encontrarem pontos de coleta de forma eficiente.\r\n          </p>\r\n\r\n          <Link to=\"/register\">\r\n            <span>\r\n              <FiLogIn />\r\n            </span>\r\n            <strong>Cadastre seu ponto de coleta</strong>\r\n          </Link>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React, { useCallback, useState } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { FiUpload } from 'react-icons/fi'\r\n\r\nimport './styles.css'\r\n\r\ninterface Props {\r\n  onFileUpload: (file: File) => void\r\n}\r\n\r\nconst Dropzone: React.FC<Props> = ({ onFileUpload }) => {\r\n  const onDrop = useCallback(\r\n    (acceptedFiles) => {\r\n      const file = acceptedFiles[0]\r\n      const fileURL = URL.createObjectURL(file)\r\n      setSelectedFileBlob(fileURL)\r\n      onFileUpload(file)\r\n    },\r\n    [onFileUpload]\r\n  )\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    onDrop,\r\n    accept: 'image/*',\r\n  })\r\n\r\n  const [selectedFileBlob, setSelectedFileBlob] = useState('')\r\n\r\n  return (\r\n    <div className=\"dropzone\" {...getRootProps()}>\r\n      <input {...getInputProps()} accept=\"image/*\" />\r\n      {selectedFileBlob ? (\r\n        <img src={selectedFileBlob} alt=\"Point thumbnail\" />\r\n      ) : (\r\n        <p>\r\n          <FiUpload />\r\n          Imagem do estabelecimento\r\n        </p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dropzone\r\n","import axios from 'axios'\r\n\r\nconst { REACT_APP_API_URL: baseURL, REACT_APP_API_IBGE } = process.env\r\nconst api = axios.create({\r\n  baseURL,\r\n})\r\n\r\nexport const ibge = axios.create({\r\n  baseURL: REACT_APP_API_IBGE,\r\n})\r\n\r\nexport default api\r\n","import React, { useState, useEffect, ChangeEvent, FormEvent } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { FiArrowLeft } from 'react-icons/fi'\r\nimport { Map, TileLayer, Marker } from 'react-leaflet'\r\nimport { LeafletMouseEvent } from 'leaflet'\r\nimport Dropzone from '../../components/Dropzone'\r\n\r\nimport api, { ibge } from '../../services/api'\r\n\r\nimport logo from '../../assets/logo.svg'\r\nimport './styles.css'\r\n\r\ninterface Item {\r\n  id: number\r\n  title: string\r\n  image_url: string\r\n}\r\n\r\ninterface IBGEUF {\r\n  sigla: string\r\n}\r\n\r\ninterface IBGECity {\r\n  nome: string\r\n}\r\n\r\nconst CreatePoint = () => {\r\n  const [items, setItems] = useState<Item[]>([])\r\n  const [ufs, setUfs] = useState<string[]>([])\r\n  const [cities, setCities] = useState<string[]>([])\r\n\r\n  const [selectedFile, setSelectedFile] = useState<File>()\r\n\r\n  const [initialPosition, setInitialPosition] = useState<[number, number]>([\r\n    0,\r\n    0,\r\n  ])\r\n  const [selectedPosition, setSelectedPosition] = useState<[number, number]>([\r\n    0,\r\n    0,\r\n  ])\r\n\r\n  const [selectedUf, setSelectedUf] = useState('')\r\n  const [selectedCity, setSelectedCity] = useState('')\r\n\r\n  const [selectedItems, setSelectedItems] = useState<number[]>([])\r\n\r\n  const [textInputData, setTextInputData] = useState({\r\n    name: '',\r\n    email: '',\r\n    whatsapp: '',\r\n  })\r\n\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const { latitude, longitude } = position.coords\r\n      setInitialPosition([latitude, longitude])\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchItems = async () => {\r\n      const { data } = await api.get('/items')\r\n      setItems(data)\r\n    }\r\n    fetchItems()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchUfs = async () => {\r\n      const { data } = await ibge.get<IBGEUF[]>('/localidades/estados')\r\n      const ufInitials = data.map((uf) => uf.sigla)\r\n      setUfs(ufInitials)\r\n    }\r\n    fetchUfs()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchCities = async () => {\r\n      const { data } = await ibge.get<IBGECity[]>(\r\n        `/localidades/estados/${selectedUf}/municipios`\r\n      )\r\n      const cityNames = data.map((city) => city.nome)\r\n      setCities(cityNames)\r\n    }\r\n    if (selectedUf) fetchCities()\r\n  }, [selectedUf])\r\n\r\n  const handleSelectUf = (event: ChangeEvent<HTMLSelectElement>) => {\r\n    setSelectedUf(event.target.value)\r\n  }\r\n\r\n  const handleSelectCity = (event: ChangeEvent<HTMLSelectElement>) => {\r\n    setSelectedCity(event.target.value)\r\n  }\r\n\r\n  const handleMapClick = (event: LeafletMouseEvent) => {\r\n    const { lat, lng } = event.latlng\r\n    setSelectedPosition([lat, lng])\r\n  }\r\n\r\n  const handleTextInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target\r\n    setTextInputData({ ...textInputData, [name]: value })\r\n  }\r\n\r\n  const handleSelectItem = (itemId: number) => () => {\r\n    selectedItems.includes(itemId)\r\n      ? setSelectedItems([...selectedItems.filter((item) => item !== itemId)])\r\n      : setSelectedItems([...selectedItems, itemId])\r\n  }\r\n\r\n  const handleSubmit = async (event: FormEvent) => {\r\n    event.preventDefault()\r\n    const [latitude, longitude] = selectedPosition\r\n    if (!selectedFile) {\r\n      alert('Voc√™ precisa de uma foto!')\r\n      return\r\n    }\r\n\r\n    const formData = new FormData()\r\n\r\n    const data: any = {\r\n      ...textInputData,\r\n      city: selectedCity,\r\n      uf: selectedUf,\r\n      items: selectedItems.join(','),\r\n      photo: selectedFile,\r\n      latitude: String(latitude),\r\n      longitude: String(longitude),\r\n    }\r\n\r\n    for (const key in data) {\r\n      formData.append(key, data[key])\r\n    }\r\n\r\n    const { status } = await api.post('/points', formData)\r\n    if (status === 201) history.push('/')\r\n  }\r\n\r\n  return (\r\n    <div id=\"page-create-point\">\r\n      <header>\r\n        <img src={logo} alt=\"ecoleta\" />\r\n        <Link to=\"/\">\r\n          <FiArrowLeft />\r\n          Voltar para home\r\n        </Link>\r\n      </header>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <h1>\r\n          Cadastro do <br /> ponto de coleta\r\n        </h1>\r\n\r\n        <Dropzone onFileUpload={setSelectedFile} />\r\n\r\n        <fieldset>\r\n          <legend>\r\n            <h2>Dados</h2>\r\n          </legend>\r\n\r\n          <div className=\"field\">\r\n            <label htmlFor=\"name\">Nome da entidade</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              id=\"name\"\r\n              onChange={handleTextInputChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"field-group\">\r\n            <div className=\"field\">\r\n              <label htmlFor=\"email\">e-mail</label>\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                id=\"email\"\r\n                onChange={handleTextInputChange}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n              <label htmlFor=\"whatsapp\">Whatsapp</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"whatsapp\"\r\n                id=\"whatsapp\"\r\n                onChange={handleTextInputChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n\r\n        <fieldset>\r\n          <legend>\r\n            <h2>Endere√ßo</h2>\r\n            <span>Selecione o endere√ßo no mapa</span>\r\n          </legend>\r\n\r\n          <Map center={initialPosition} zoom={14} onclick={handleMapClick}>\r\n            <TileLayer\r\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n\r\n            <Marker position={selectedPosition} />\r\n          </Map>\r\n\r\n          <div className=\"field-group\">\r\n            <div className=\"field\">\r\n              <label htmlFor=\"uf\">Estado (UF)</label>\r\n              <select\r\n                name=\"uf\"\r\n                id=\"uf\"\r\n                value={selectedUf}\r\n                onChange={handleSelectUf}\r\n              >\r\n                <option value=\"\">Selecione uma UF</option>\r\n                {ufs.map((uf) => (\r\n                  <option value={uf} key={uf}>\r\n                    {uf}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n              <label htmlFor=\"city\">Cidade</label>\r\n              <select\r\n                name=\"city\"\r\n                id=\"city\"\r\n                onChange={handleSelectCity}\r\n                value={selectedCity}\r\n              >\r\n                <option value=\"\">Selecione uma cidade</option>\r\n                {cities.map((city) => (\r\n                  <option key={city} value={city}>\r\n                    {city}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n\r\n        <fieldset>\r\n          <legend>\r\n            <h2>Itens de coleta</h2>\r\n            <span>Selecione um ou mais itens abaixo</span>\r\n          </legend>\r\n          <ul className=\"items-grid\">\r\n            {items.map((item) => (\r\n              <li\r\n                key={item.id}\r\n                onClick={handleSelectItem(item.id)}\r\n                className={selectedItems.includes(item.id) ? 'selected' : ''}\r\n              >\r\n                <img src={item.image_url} alt={item.title} />\r\n                <span>{item.title}</span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </fieldset>\r\n        <button type=\"submit\">Cadastrar ponto de coleta</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreatePoint\r\n","import React from 'react'\r\nimport { HashRouter, Route, Switch } from 'react-router-dom'\r\nimport Home from './pages/home'\r\nimport CreatePoint from './pages/CreatePoint'\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/register\" component={CreatePoint} />\r\n      </Switch>\r\n    </HashRouter>\r\n  )\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react'\nimport Routes from './Routes'\nimport './App.css'\n\nfunction App() {\n  return <Routes />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}